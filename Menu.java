/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package banking;

import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author Jian
 */
public class Menu extends javax.swing.JFrame {

private HashMap<String, Double> balances;
 private String username;
    /**
     * Creates new form Menu
     */
    public Menu() {
        
        initComponents();
    }
  public void setBalances(HashMap<String, Double> balances) {
        this.balances = balances;
    }
    public Menu(String username) {
    this.username = username;
    initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        view = new javax.swing.JButton();
        Withraw = new javax.swing.JButton();
        Deposit = new javax.swing.JButton();
        Transfer = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Exit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jLabel8.setText("jLabel8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel2.setBackground(new java.awt.Color(204, 102, 0));
        jLabel2.setFont(new java.awt.Font("Impact", 2, 24)); // NOI18N
        jLabel2.setText("Point.Bank.com.ph");
        jLabel2.setMaximumSize(new java.awt.Dimension(100, 90));
        jLabel2.setMinimumSize(new java.awt.Dimension(30, 26));
        jLabel2.setPreferredSize(new java.awt.Dimension(33, 16));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        view.setBackground(new java.awt.Color(51, 51, 51));
        view.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        view.setForeground(new java.awt.Color(255, 255, 255));
        view.setText("Account Balance");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        Withraw.setBackground(new java.awt.Color(51, 51, 51));
        Withraw.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        Withraw.setForeground(new java.awt.Color(255, 255, 255));
        Withraw.setText("Withdraw");
        Withraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithrawActionPerformed(evt);
            }
        });

        Deposit.setBackground(new java.awt.Color(51, 51, 51));
        Deposit.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        Deposit.setForeground(new java.awt.Color(255, 255, 255));
        Deposit.setText("Deposit");
        Deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositActionPerformed(evt);
            }
        });

        Transfer.setBackground(new java.awt.Color(51, 51, 51));
        Transfer.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        Transfer.setForeground(new java.awt.Color(255, 255, 255));
        Transfer.setText("Transfer Funds");
        Transfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jLabel1.setText("What would you like to do today?");

        jLabel4.setText("1.");

        jLabel5.setText("2.");

        jLabel6.setText("3.");

        jLabel7.setText("4.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Withraw, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Transfer, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(4, 4, 4)
                .addComponent(Withraw, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Transfer, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        Exit.setBackground(new java.awt.Color(153, 153, 153));
        Exit.setFont(new java.awt.Font("Sylfaen", 1, 12)); // NOI18N
        Exit.setText("Exit and log out");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("YOUR MONEY ");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setText("YOUR  BRIGHT FUTURE ");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setText("IS SAFE WITH US!");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setText("IN POINT.BANK WE TRUST!");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(Exit)))
                .addGap(50, 50, 50)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(45, 45, 45)
                .addComponent(jLabel11)
                .addGap(47, 47, 47)
                .addComponent(jLabel12)
                .addGap(40, 40, 40)
                .addComponent(jLabel10)
                .addGap(28, 28, 28)
                .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
         // TODO add your handling code here:
     
       // Check if the username exists in the balances HashMap
        if (balances.containsKey(username)) {
            double balance = balances.get(username);
            JOptionPane.showMessageDialog(null, "Balance for " + username + ": $" + balance);
        } else {
            JOptionPane.showMessageDialog(null, "No balance found for " + username);
        }
    }//GEN-LAST:event_viewActionPerformed

    private void WithrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithrawActionPerformed
       // TODO add your handling code here:
         // Get the amount to withdraw from the user
    String withdrawAmountString = JOptionPane.showInputDialog(null, "Enter amount to withdraw:");
    
    // Check if the user canceled or closed the input dialog
    if (withdrawAmountString == null) {
        return; // Exit the method if the user canceled
    }
    
    // Parse the input string to a double
    double withdrawAmount;
    try {
        withdrawAmount = Double.parseDouble(withdrawAmountString);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
        return; // Exit the method if the input is not a valid number
    }
    
    // Check if the withdrawal amount is negative or zero
    if (withdrawAmount <= 0) {
        JOptionPane.showMessageDialog(null, "Withdrawal amount must be a positive number.");
        return; // Exit the method if the withdrawal amount is not positive
    }
    
    // Check if the username exists in the balances HashMap
    if (balances.containsKey(username)) {
        // Get the current balance
        double currentBalance = balances.get(username);
        
        // Check if the withdrawal amount is greater than the current balance
        if (withdrawAmount > currentBalance) {
            JOptionPane.showMessageDialog(null, "Insufficient funds. You cannot withdraw more than your current balance.");
            return; // Exit the method if the withdrawal amount is greater than the current balance
        }
        
        // Subtract the withdrawal amount from the current balance
        double newBalance = currentBalance - withdrawAmount;
        
        // Update the balance in the balances HashMap
        balances.put(username, newBalance);
        
        // Display a message to inform the user about the successful withdrawal
        JOptionPane.showMessageDialog(null, "Withdrawal successful! Your new balance is: $" + newBalance);
    } else {
        JOptionPane.showMessageDialog(null, "No balance found for " + username);
    }
    }//GEN-LAST:event_WithrawActionPerformed

    private void DepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositActionPerformed
        // TODO add your handling code here:
         // Get the amount to deposit from the user
    String depositAmountString = JOptionPane.showInputDialog(null, "Enter amount to deposit:");
    
    // Check if the user canceled or closed the input dialog
    if (depositAmountString == null) {
        return; // Exit the method if the user canceled
    }
    // Parse the input string to a double
    double depositAmount;
    try {
        depositAmount = Double.parseDouble(depositAmountString);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
        return; // Exit the method if the input is not a valid number
    }
    
    // Check if the deposit amount is negative or zero
    if (depositAmount <= 0) {
        JOptionPane.showMessageDialog(null, "Deposit amount must be a positive number.");
        return; // Exit the method if the deposit amount is not positive
    }
    
    // Check if the username exists in the balances HashMap
    if (balances.containsKey(username)) {
        // Get the current balance
        double currentBalance = balances.get(username);
        
        // Add the deposit amount to the current balance
        double newBalance = currentBalance + depositAmount;
        
        // Update the balance in the balances HashMap
        balances.put(username, newBalance);
        
        // Display a message to inform the user about the successful deposit
        JOptionPane.showMessageDialog(null, "Deposit successful! Your new balance is: $" + newBalance);
    } else {
        JOptionPane.showMessageDialog(null, "No balance found for " + username);
    }
    }//GEN-LAST:event_DepositActionPerformed

    private void TransferActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
                                                      
     String accountname;
    do {
    accountname = JOptionPane.showInputDialog(null, "Enter the account username:");
    if (accountname == null) {
        return; // Exit the method if the user canceled
    } else if (accountname.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter an account name you want to transfer.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    } while (accountname.isEmpty());
    String transferAmountString = JOptionPane.showInputDialog(null, "Enter amount to transfer:");

    // Check if the user canceled or closed the input dialog
    if (transferAmountString == null) {
    return; // Exit the method if the user canceled
    }

// Parse the input string to a double
     double transferAmount;
     try {
     transferAmount = Double.parseDouble(transferAmountString);
    } catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(null, "Please enter a valid amount.", "Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the input is not a valid number
    }

// Check if the transfer amount is negative or zero
    if (transferAmount <= 0) {
    JOptionPane.showMessageDialog(null, "Transfer amount must be a positive number.");
    return; // Exit the method if the transfer amount is not positive
    }

// Check if the username exists in the balances HashMap
     if (balances.containsKey(username)) {
    // Get the current balance
    double currentBalance = balances.get(username);
    
    // Check if the transfer amount is greater than the current balance
    if (transferAmount > currentBalance) {
        JOptionPane.showMessageDialog(null, "Insufficient funds. You cannot transfer more than your current balance.");
        return; // Exit the method if the transfer amount is greater than the current balance
    }
    
    // Subtract the transfer amount from the current balance
    double newBalance = currentBalance - transferAmount;
    
    // Update the balance in the balances HashMap
    balances.put(username, newBalance);
    
    // Display a message to inform the user about the successful transfer
    JOptionPane.showMessageDialog(null, "Transfer successful! Your new balance is: $" + newBalance);
} else {
    JOptionPane.showMessageDialog(null, "No balance found for " + username);
}
    }                                        

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null," Are you sure you want to exit? ", "Admin",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);
            if(result == JOptionPane.YES_OPTION){
                JOptionPane.showMessageDialog(null , "DE GUZMAN, JIAN, B. ITE232");
                System.exit(0);
            }
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Deposit;
    private javax.swing.JButton Exit;
    private javax.swing.JButton Transfer;
    private javax.swing.JButton Withraw;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
}
